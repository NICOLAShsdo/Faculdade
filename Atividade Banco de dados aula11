-- exercicios


--1 crie uma store procedure chamada proc_upd_nome_depart para atualizar o nome de um departamento. 
--recebe como parametro um codigo inteiro e um novonome em texto atualizando o nome do departamento com esse respectivo codigo
CREATE OR REPLACE PROCEDURE proc_upd_nome_depart(
    p_cod_departamento INT,
    p_novo_nome TEXT
) AS $$
BEGIN
    UPDATE tbl_departamentos
    SET nome = p_novo_nome
    WHERE cod_departamento = p_cod_departamento;

    -- Verifica se a atualização foi bem-sucedida
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Departamento com código % não encontrado.', p_cod_departamento;
    END IF;
END;
$$ LANGUAGE plpgsql;

CALL proc_upd_nome_depart(1, 'Novo Nome do Departamento');

--2 crie uma store procedure chamada proc_copiatbl que cria uma copia da tabela tbl_cidades toda vez que for executada;
CREATE OR REPLACE PROCEDURE proc_copiatbl() AS $$
DECLARE
    v_nome_tabela TEXT;
BEGIN
    -- Gerar um nome para a nova tabela baseado na data e hora atual
    v_nome_tabela := 'tbl_cidades_copia_' || to_char(NOW(), 'YYYYMMDD_HH24MISS');

    -- Executar a criação da nova tabela e a cópia dos dados
    EXECUTE format('
        CREATE TABLE %I AS 
        SELECT * FROM tbl_cidades',
        v_nome_tabela);

    RAISE NOTICE 'Tabela % criada com sucesso.', v_nome_tabela;
END;
$$ LANGUAGE plpgsql;

CALL proc_copiatbl();

--3 crie uma store procedure chamada proc_novoprojeto que adiciona um novo projeto na tabela tbl_projetos
--recebe como parametros o nome do projeto e o codigo do departamento
CREATE OR REPLACE PROCEDURE proc_novoprojeto(
    p_nome_projeto TEXT,
    p_cod_departamento INT
) AS $$
BEGIN
    -- Inserir um novo projeto na tabela tbl_projetos
    INSERT INTO tbl_projetos (nome, cod_departamento)
    VALUES (p_nome_projeto, p_cod_departamento);
    
    RAISE NOTICE 'Projeto "%", adicionado ao departamento com código %.', p_nome_projeto, p_cod_departamento;
END;
$$ LANGUAGE plpgsql;

CALL proc_novoprojeto('Novo Projeto Exemplo', 1);

--4 crie uma store procedure chamada proc_delprojeto que deleta um projeto da tbl_projetos
-- recebe como parametro o codigo do projeto
CREATE OR REPLACE PROCEDURE proc_delprojeto(
    p_cod_projeto INT
) AS $$
BEGIN
    -- Deletar o projeto da tabela tbl_projetos
    DELETE FROM tbl_projetos
    WHERE cod_projeto = p_cod_projeto;

    -- Verifica se a exclusão foi bem-sucedida
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Projeto com código % não encontrado.', p_cod_projeto;
    ELSE
        RAISE NOTICE 'Projeto com código % deletado com sucesso.', p_cod_projeto;
    END IF;
END;
$$ LANGUAGE plpgsql;

CALL proc_delprojeto(1);

--5 crie uma store procedure chamada proc_projeto_arquivado que recebe o codigo de um projeto.
--a procedure devera criar uma tabela chamada tbl_projetos_arquivados, caso ela nao exista. tabela deve ter 2 colunas: codigo_projeto e nome.
--a procedure deve salvar o projeto do codigo recebido na tbl_projetos_arquivados e deleta-la da tabela tbl_projetos.
CREATE OR REPLACE PROCEDURE proc_projeto_arquivado(
    p_cod_projeto INT
) AS $$
BEGIN
    -- Criar a tabela tbl_projetos_arquivados se não existir
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'tbl_projetos_arquivados') THEN
        EXECUTE 'CREATE TABLE tbl_projetos_arquivados (
            codigo_projeto INT PRIMARY KEY,
            nome TEXT NOT NULL
        )';
    END IF;

    -- Inserir o projeto na tabela tbl_projetos_arquivados
    INSERT INTO tbl_projetos_arquivados (codigo_projeto, nome)
    SELECT cod_projeto, nome
    FROM tbl_projetos
    WHERE cod_projeto = p_cod_projeto;

    -- Deletar o projeto da tabela tbl_projetos
    DELETE FROM tbl_projetos
    WHERE cod_projeto = p_cod_projeto;

    -- Verifica se a inserção e deleção foram bem-sucedidas
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Projeto com código % não encontrado.', p_cod_projeto;
    ELSE
        RAISE NOTICE 'Projeto com código % arquivado com sucesso.', p_cod_projeto;
    END IF;
END;
$$ LANGUAGE plpgsql;

CALL proc_projeto_arquivado(1);
